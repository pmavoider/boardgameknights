import { createSlice } from "@reduxjs/toolkit";
import { current } from "@reduxjs/toolkit";

const initialState = { cart: [] };
export const shoppingCartSlice = createSlice({
  name: "shoppingCart",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    add: (state, action) => {
      console.log(current(state.cart));
      const itemInCart = state.cart.find(
        (item) => item.product.name == action.payload.product.name
      );
      console.log(itemInCart);
      if (itemInCart) {
        itemInCart.qty++;
      } else state.cart.push({ ...action.payload, qty: 1 });
    },
    increment: (state, action) => {
      console.log(state.cart);
      const item = state.cart.find(
        (item) => item.product.name == action.payload.product.name
      );
      item.qty++;
    },
    decrement: (state, action) => {
      const item = state.cart.find(
        (item) => item.product.name == action.payload.product.name
      );
      if (item.qty === 1) {
        item.quantity = 1;
      } else {
        item.qty--;
      }
    },
    remove: (state, action) => {
      const removeItem = state.cart.filter(
        (item) => item.product.name != action.payload.product.name
      );
      state.cart = removeItem;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});

export const { add, increment, decrement, remove } = shoppingCartSlice.actions;

export const shoppingCartReducer = shoppingCartSlice.reducer;
